=pod

=head1 NAME

B<harry> -- a tool for measuring string similarity 

=head1 SYNOPSIS

B<harry> [B<options>] [B<-c> I<config>] I<input> I<output>

=head1 DESCRIPTION

B<harry> is a small tool for measuring the similarity of strings. The tool
supports several common distance and kernel functions for strings as well as
some excotic similarity measures.  The focus of B<harry> lies on implicit
similarity measures, that is, comparison functions that do not give rise to
an explicit vector space, such as the Levenshtein distance.  B<harry>
thereby complements the tool B<harry> that embeds strings in vector spaces
and allows computing explicit similarity measures, such as bag-of-word
kernels.

For comparison B<harry> first loads strings from I<input>, computes the
specified similarity measure and then writes a matrix of similarity values
to I<output>.  The configuration of this process, such as the input format,
the similarity measure and the output format, are specified in the file
I<config> and additionally using command-line options.

    .---------.                        .----------.
    |  lines  |                        |   text   |
    |   dir   |   \   .---------.   /  |  libsvm  |
    |   arc   |   --  |  Harry  |  --  |  matlab  |
    |   ...   |   /   '---------'   \  |   ...    |
    '---------'                        '----------'
       Input      Similarity Measures     Output


=head1 SIMILARITY MEASURES

The following distance functions for strings are supported: Hamming distance,
Levenshtein distance, Damerau-Levenshtein distance, Jaro distance,
Jaro-Winkler distance, Lee distance and normaliezd compression distance.

The following kernel functions for strings are supported: weighted-degree
kernel, weighted-degree kernel with shifts and subsequence kernel.

=back

=head1 CONFIGURATION

The configuration of B<harry> is specified in a configuration file.  This
file is structured into the three sections B<input>, B<measures> and
B<output>, which define the parameters of the input format, the similarity
measures and the output format, respectively.

If no configuration file is provided, B<harry> resorts to a default
configuration. This default configuration can be dumped using the
command-line option B<-D>.

=head2 Input formats

B<harry> supports different formats for reading data sets of strings,
which may range from plain files to directories and other structured
resources. Following is a list of supported input formats.

=over 4

=item B<input = {>

=over 4

=item B<input_format = "lines";>

This parameter specifies the input format.

=over 14

=item I<"lines">

The input strings are available as lines in a text file. The name of the
file is given as I<input> to B<sally>.  The lines need to be separated by
newline and may not contain the NUL character.  Labels can be extracted from
each line using a regular expression (see B<lines_regex>).

=item I<"dir"> 

The input strings are available as binary files in a directory and the
name of the directory is given as I<input> to B<harry>. The suffixes
of the files are used as labels for the strings.

=item I<"arc"> 

The input strings are available as binary files in a compressed
archive, such as a zip or tgz archive.  The name of the archive is
given as I<input> to B<harry>.  The suffixes of the files are used as
labels for the strings.

=item I<"fasta">

The input strings are available in FASTA format. The name of the file is
given as I<input> to B<sally>.  Labels can be extracted from the description
of each sequence using a regular expression (see B<fasta_regex>).  Comments
are allowed if they are preceded by either ';' or '>'.

=back 

=item B<decode_str = 0;>

If this parameter is set to 1, B<harry> automatically decodes strings that
contain URI-encoded characters.  That is, substrings of the form %XX are
replaced with the byte represented by the hexadecimal number XX.  This
feature comes handy, if binary data is provided using the textual input
format "lines".  For example, HTTP requests can be stored in a single line
if line-breaks are represented by "%0a%0d".

=item B<fasta_regex = " (\\+|-)?[0-9]+";>

The FASTA format allows to equip each string with a short description.  In
several data sets this description contains a numerical label which can be
useful in supervised learning tasks.  The parameter is a regular expression
which can be used to match numerical labels, such as +1 and -1.

=item B<lines_regex = "^(\\+|-)?[0-9]+";>

If the strings are available as text lines, the parameter can be used to
extract a numerical label from the strings.  The parameter is a regular
expression matching labels, such as +1 and -1.

=item B<reverse_str = 0;>

If this parameter is set to 1, the characters of all input strings will
[Bbe reversed. Such reversing might help in situations where the 
reading direction of the input strings is unspecified.

=item B<stopword_file = "";>

Stop words (irrelevant words) can be filtered from the strings by providing
a file containing these words; one per line.  Non-printable characters can
be escaped using URI encoding (%XX).  Stop words can only be filtered, if a
set of delimiters is defined using B<delim>.

=back

=item B<};>

=back

=head2 Similarity Measures

B<harry> supports different similarity measures for comparing string,
including common distance and kernel functions for strings.  Depending on
the configuration, the strings are either compared using invididual
characters or using words.

=over 4

=item B<measures = {>

=over 4

=item B<type = "dist_levenshtein";>

The parameter B<type> specifies the similarity measure that is used for
comparing the strings.

=item B<delim = "";>

The parameter B<delim> defines characters for delimiting words in strings.
If this parameter is set the comparison of strings is performed on words,
that is, each word is considered as a symbol. If the parameter B<delim> is
an emptry strings, B<harry> considers each individual character as a symbol.

=item B<cache_size = 256;>

The parameter B<cache_size> specifies the maximum size of the internal cache
in megabytes (Mb).  The general-purpose cache is used to speed up
computations of B<harry> for some similarity measures.

=item B<global_cache = 0;>

By default B<harry> caches only internal computations. If this parameter is
set to 1, all similarity values are stored in the cache.  This feature
should only be enabled if many of the compared strings are identical and
thus caching similarity values can provide benefits.

=item B<dist_hamming = {> 

This module implements the Hamming distance (see Hamming, 1950).  The
runtime complexity of a comparison is linear in the length of the strings.
If the compared strings have unequal length, the length difference is added
to the distance.  The following parameters are supported:

=over 4

=item B<norm = "none";>

This parameter specifies the normalization of the distance. Supported values
are I<"none"> for no normalization, I<"min"> for normalization on the
minimum length, I<"max"> for normalization on the maximum length, I<"avg">
for normalization on the average length of the compared .

=back

=item B<};>

=item B<dist_levenshtein = {> 

This module implements the Levenshtein distance (see Levenshtein, 1966). The
runtime complexity of a comparison is quadratic in the length of the
strings.  The following parameters are supported:

=over 4

=item B<norm = "none";>

This parameter specifies the normalization of the distance. Supported values
are I<"none"> for no normalization, I<"min"> for normalization on the
minimum length, I<"max"> for normalization on the maximum length, I<"avg">
for normalization on the average length of the compared 

=item B<cost_ins = 1.0;>

=item B<cost_del = 1.0;>

=item B<cost_sub = 1.0;>

The computation of the distance can be adapted using three parameters
defining the cost for an insertation, deletion and substitution,
respectively.  The default costs are 1.0 for each operation.

=back

=item B<};>

=item B<dist_damerau = {> 

This module implements the Damerau-Levenshtein distance (see Damerau, 1964).
The runtime complexity of a comparison is quadratic in the length of the
strings.  The following parameters are supported:

=over 4

=item B<norm = "none";>

This parameter specifies the normalization of the distance. Supported values
are I<"none"> for no normalization, I<"min"> for normalization on the
minimum length, I<"max"> for normalization on the maximum length, I<"avg">
for normalization on the average length of the compared 

=item B<cost_ins = 1.0;>

=item B<cost_del = 1.0;>

=item B<cost_sub = 1.0;>

=item B<cost_tra = 1.0;>

The computation of the distance can be adapted using four parameters
defining the cost for an insertation, deletion, substitution and
tranposition, respectively.  The default costs are 1.0 for each operation.

=back

=item B<};>


=item B<dist_jarowinkler = {> 

This module implements the Jaro distance (Jaro, 1989) and the Jaro-Winkler
distance (Winkler, 1990). The runtime complexity of a comparison is
quadratic in the length of the strings.  The following parameters are
supported:

=over 4

=item B<scaling = 0.1;>

If this parameter is set to 0, the original Jaro distance is returned, 
otherwise the Jaro-Winkler distance is calculated. This distance uses a
B<scaling> which gives more favourable ratings to strings that match from
the beginning up to 4 symbols. The default value is 0.1.

=back

=item B<};>

=item B<dist_lee = {> 

This module implements the Lee distance (Lee, 1958) for strings. The runtime
complexity of a comparison is linear in the length of the strings. If the
compared strings have unequal length, the remaining symbols of the longer
string are added to the distance. The following parameters are supported:

=over 4

=item B<min_sym = 0;>
=item B<max_sym = 255;>

These parameters specify the range of symbols, that is, the minimum and
maximum value of a symbol in all strings.  If the strings consist of bytes,
B<min_sym> is typically set to 0 and B<max_sym> to 256.  For printable
characters the range can be further narrowed to 32 and 126.  If words are
analyzed using the parameter B<delim>, B<min_sym> must be set to 0 and
B<max_sym> to 65535.

=back

=item B<};>

=item B<dist_compression = {> 

This module implements the normalized compression distance for strings
(Cilibrasi and Vitanyi, 2005).  The compression is implemented using B<zlib>.  Note that the
comparison of strings highly depends on the characteristics of the
compressor (Cebrian et al., 2005).  The strings should not be longer than 16
kilobytes, such that two strings fit into the window of B<zlib>.  The
runtime complexity of a comparison is linear in the length of the strings,
though with a large constant factor.  The following parameters are
supported:

=over 4

=item B<level = 9;> 

This parameter defines the compression level used by B<zlib> and must be 
between 1 and 9, where 1 gives the best speed and 9 the best compression. 
See B<zlib(3)>

=back

=item B<};>


=item B<kern_wdegree = {>

This module implements the weighted-degree kernel with shifts (Sonnenburg et
al., 2007).  The runtime complexity is linear in the length of the strings. 
If the strings have unequal length, the remaining symbols of the longer
string are ignored, in accordance with the kernel definition.  The following
parameters are supported:

=over 4

=item B<norm = "none";>

This parameter specifies the normalization of the kernel. Supported values
are I<"none"> for no normalization and I<"l2"> for the standard l2 
normalization of kernels.

=item B<degree = 3;>

This parameter specifies the degree of the kernel, that is, the length of
considered k-mers/k-grams.  As the kernel computation is implicit, the
k-mers are not extracted but implicitly counted by blocks of matching symbols.

=item B<shift = 0;>

To compensate noise in the strings, the kernel can be computed with "shifts". 
The strings are compared multiple times with different positive and negative
offsets up to B<shift> symbols.  The different kernel values are added.  The
runtime complexity is increased by twice the value of B<shift>.

=back

=item B<};>

=item B<kern_subsequence = {>

This module implements the subsequence kernel (Lodhi et al., 2002). The
runtime complexity is quadratic in the length of the strings. The following
parameters are supported:

=over 4

=item B<norm = "none";>

This parameter specifies the normalization of the kernel. Supported values
are I<"none"> for no normalization and I<"l2"> for the standard l2 
normalization of kernels.

=item B<length = 3;>

This parameter specifies the length of subsequence to consider.

=item B<lambda = 0.1;>

This parameter is a weighting term for gaps within subsequences.

=back

=item B<};>


=back

=item B<};>

=back

=head2 Output formats

Once strings have been compared, B<harry> stores the similarity values in
one of several common formats, which allows for applying typical tools of
statistics and machine learning to the data.

=over 4

=item B<output = {>

=over 4

=item B<output_format = "text";>

Following is a list of output formats supported by B<harry>:

=over 14

=item I<"text"> 

The similarity values are stored as plain text.

=item I<"libsvm">

The similarity values are stored as precomputed kernel for libsvm. 

=back

=item B<compress = 0;>

If this parameter is set to 1, the output is stored using zlib compression,
which can significantly reduce the required disk space.  Several programs
support reading files compressed using zlib.  Alternatively, the tools
gzcat(1) and gunzip(1) can be used to access the data.

=back

=item B<};>

=back

=head1 OPTIONS

The configuration of B<harry> can be refined and altered using several
command-line options.  Moreover, some parameters of the configuration can be
overwritten on the command-line.  Following is the list of options:

=head2 I/O options

  -i,  --input_format <format>   Set input format for strings.
       --decode_str <0|1>        Set URI-decoding of strings.
       --reverse_str <0|1>       Reverse (flip) all strings.
       --stopword_file <file>    Provide a file with stop words.
  -o,  --output_format <format>  Set output format for vectors.
  -z,  --compress <0|1>          Set zlib compression of output.

=head2 Module options

  -t,  --type <name>		 Set similarity measure module
  -d   --delim <delimiters>	 Set delimiters for words
  -a,  --cache_size <size>       Set size of cache in megabytes
  -g,  --global_cache <0|1>      Set global cache for similarity values

=head2 Generic options

  -c,  --config_file <file>      Set configuration file.
  -v,  --verbose                 Increase verbosity.
  -q,  --quiet                   Be quiet during processing.
  -C,  --print_config            Print the current configuration.
  -D,  --print_defaults          Print the default configuration.
  -V,  --version                 Print version and copyright.
  -h,  --help                    Print this help screen.

=head1 FILES

=over 4

=item F<PREFIX/share/doc/harry/example.cfg>

An example configuration file for B<harry>. See the configuration
section for further details.

=back

=head1 REFERENCES

Cebrian, Alfonseca, and Ortega. Common pitfalls using the normalized compression distance. Communicstions in Information and Systems, 5 (4), 367-384, 2005.

Cilibrasi and Vitanyi. Clustering by compression, IEEE Transactions on Information Theory, 51:4, 1523-1545, 2005. 

Damerau. A technique for computer detection and correction of spelling errors, Communications of the ACM, 7(3):171-176, 1964

Hamming. Error-detecting and error-correcting codes. Bell System Technical Journal, 29(2):147-160, 1950.

Jaro. Advances in record linkage methodology as applied to the 1985 census of Tampa Florida. Journal of the American Statistical Association 84 (406): 414-420, 1989.

Lee. Some properties of nonbinary error-correcting codes. IRE Transactions on Information Theory 4 (2): 77-82, 1958.

Levenshtein. Binary codes capable of correcting deletions, insertions, and reversals. Doklady Akademii Nauk SSSR, 163 (4):845-848, 1966.

Lodhi, Saunders, Shawe-Taylor, Cristianini, and Watkins. Text classification using string kernels. Journal of Machine Learning Research, 2:419-444, 2002.

Sonnenburg, Raetsch, and Rieck. Large scale learning with string kernels. In Large Scale Kernel Machines, pages 73--103. MIT Press, 2007.

Winkler.  String Comparator Metrics and Enhanced Decision Rules in the Fellegi-Sunter Model of Record Linkage. Proceedings of the Section on Survey Research Methods. 354-359, 1990.

=head1 COPYRIGHT

Copyright (c) 2013 Konrad Rieck (konrad@mlsec.org)

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.  This program is distributed without any warranty.  See
the GNU General Public License for more details.

=cut
