""" 
    Harry - A Tool for Measuring String Similarity
    Copyright (C) 2013-2015 Konrad Rieck (konrad@mlsec.org)
 
    Harry is a small module and tool for measuring the similarity of
    strings.  The module supports common distance and kernel functions for
    strings as well as some exotic similarity measures.  The focus of
    Harry lies on implicit similarity measures, that is, comparison
    functions that do not give rise to an explicit vector space.  Examples
    of such similarity measures are the Levenshtein distance, the
    Jaro-Winkler distance or the normalized compression distance.
"""

import os
import subprocess as sp
import shlex
import urllib
import struct
import warnings
import array


def __run_harry(strs, opts):
    """ 
    Internal function to call the tool Harry

    Main args:
      strs (list):              List of strings to compare.
      opts (str):               Command-line options for Harry

    Returns:
      matrix:                   Matrix of similarity values
    """

    # Decode special characters and prepare input
    strs = map(urllib.quote, strs)
    stdin = '\n'.join(strs)

    # Construct path
    tool = os.path.join("%BINDIR%", "harry")

    # Input: "-"  Read strings from standard input
    # Output: "="  Write raw matrix to standard output
    cmd = "%s %s --decode_str - =" % (tool, opts)
    args = shlex.split(cmd)
    p = sp.Popen(args, stdout=sp.PIPE, stdin=sp.PIPE, stderr=None)
    stdout, stderr = p.communicate(input=stdin)

    if p.returncode != 0:
        raise Exception("Error while executing %s. See above." % tool)

    # Unpack dimensions of matrix
    xdim, ydim = struct.unpack("II", stdout[0:8])

    # Check whether numpy is available
    try:
        import numpy as np
        # Generate matrix form buffer and reshape it
        mat = np.frombuffer(stdout[8:], dtype=np.float32)
        mat = mat.reshape(xdim, ydim)
    except ImportError:
        # Generate array of floats
        a = array.array("f")
        a.fromstring(stdout[8:])
        # Generate list of lists
        mat = []
        for i in range(0, xdim * ydim, xdim):
            mat.append(a[i:i+xdim].tolist())

    return mat



def compare(x, y=None, **kwargs):
    """ 
    Compare strings using a similarity measure

    Main args:
      x (list):               List of strings to compare.
      y (list):               Second list of strings (optional).

    %USAGE%

    Returns:
      matrix:                 Matrix of similarity values
    """

    %KEYARGS%

    # Process options
    opts = ""
    for (k, v) in kwargs.items():
	if k not in keyargs:
	    raise Exception("Unknown argument '%s'" % k)
        if type(v) is bool:
            opts += " --%s" % k
        elif type(v) is float or type(v) is int:
            opts += " --%s=%g" % (k, v)
        else:
            opts += " --%s=%s" % (k, v)

    # Fix incorrect usage
    x = x if type(x) is list else [x]

    if y:
        # Fix incorrect usage again
        y = y if type(y) is list else [y]

        # We merge the lists and use index ranges
        opts += " -x :%d -y %d:" % (len(x), len(x))
        x += y

    if len(x) < 10:
        warnings.warn("Harry is not efficient on small sets of strings.")

    return __run_harry(x, opts)
