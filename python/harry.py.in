""" 
    Harry is a small tool for measuring the similarity of strings.  The
    module supports common distance and kernel functions for strings as 
    well as some exotic similarity measures.

    The Python module of Harry uses largely the same parameters as the
    command-line tool. See manual page harry(1) for more information.
    Copyright (C) 2013-2015 Konrad Rieck (konrad@mlsec.org)
"""

import os
import subprocess as sp
import shlex
import urllib
import struct
import warnings

try:
    import numpy as np
except ImportError:
    raise Exception("The package numpy is required")

# Construct path for Harry tool
__tool = os.path.join("%BINDIR%", "harry")
if not os.path.exists(__tool):
    raise Exception("Cannot find tool at %s" % __tool)


def __run_harry(strs, opts):
    """ 
    Internal function to call the tool Harry

    Parameters
    ----------
    strs (list)               List of strings to compare.
    opts (str)                Command-line options for Harry

    Returns
    -------
    out (ndarray)             Matrix of similarity values
    """

    # Decode special characters and prepare input
    strs = map(urllib.quote, strs)
    stdin = '\n'.join(strs)

    # Input: "-"  Read strings from standard input
    # Output: "="  Write raw matrix to standard output
    cmd = "%s %s - =" % (__tool, opts)
    args = shlex.split(cmd)
    p = sp.Popen(args, stdout=sp.PIPE, stdin=sp.PIPE, stderr=None)
    stdout, stderr = p.communicate(input=stdin)
    if p.returncode != 0:
        raise Exception("Error while executing %s. See above." % __tool)

    # No output available
    if len(stdout) == 0:
        return None

    # Unpack dimensions of matrix
    rows, cols = struct.unpack("II", stdout[0:8])

    # Generate matrix form buffer and reshape it
    mat = np.frombuffer(stdout[8:], dtype=np.float32)
    mat = np.reshape(mat, (rows, cols))

    return mat


def compare(x, y=None, **kwargs):
    """ 
    Compare strings using a similarity measure

    Parameters
    ----------
    x (list)                  List of strings to compare   
    y (list)                  List of strings to compare [optional]
    %USAGE%
    Returns
    -------
    out (ndarray)             Matrix of similarity values
    """

    %KEYARGS%

    # Process options
    opts = "--decode_str"
    for (k, v) in kwargs.items():
        if k not in keyargs:
            raise Exception("Unknown argument '%s'" % k)
        if type(v) is bool:
            opts += " --%s" % k
        elif type(v) is float or type(v) is int:
            opts += " --%s=%g" % (k, v)
        else:
            opts += " --%s=%s" % (k, v)

    # Fix incorrect usage
    x = x if type(x) is list else [x]

    if y:
        # Fix incorrect usage again
        y = y if type(y) is list else [y]

        # We merge the lists and use index ranges
        opts += " --row_range :%d --col_range %d:" % (len(x), len(x))
        x = x + y

    if len(x) < 50:
        warnings.warn("Harry is not efficient on small sets of strings.")

    return __run_harry(x, opts)


def print_measures():
    """
    Print list of similarity measures supported by Harry
    """
    __run_harry([], "--print_measures")


def print_defaults():
    """
    Print default configuration of Harry
    """
    __run_harry([], "--print_defaults")
