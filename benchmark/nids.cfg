# Example configuration for Harry
# Copyright (C) 2013-2014 Konrad Rieck (konrad@mlsec.org)
# --
# A detailed description of all configuration parameters is provided
# in the manual page, see harry(1).

# Input configuration
input = {
    	# Input format.
    	# Supported types: "dir", "arc", "lines", "fasta", "stdin"
    	input_format = "lines";

	# Number of strings to load in each chunk
	chunk_size = 256;

    	# Decode strings using URI encoding.
    	decode_str = false;

    	# Regex for extracting labels from FASTA descriptions
    	fasta_regex = " (\\+|-)?[0-9]+";

    	# Regex for extracting labels from text lines
    	lines_regex = "^(\\+|-)?[0-9]+";

    	# Reverse (flip) the input strings.
    	reverse_str = false;

    	# Provide a file containing stop words (one per line)
    	stopword_file = "";

	# Convert words to soundex index
	soundex = false;
};

measures = {

	# Selected similarity measure
	measure = "dist_levenshtein";

	# Delimiters for strings or empty string
	word_delim = "";

	# Number of threads (0 = auto)
	num_threads = 0; 

	# Cache size in megabytes.
	cache_size = 1000;

	# Global cache
	global_cache = false;

	# Range for matrix of similarity values ("" = full)
	x_range = "";
	y_range = "";

	# Split matrix into blocks ("" = full)
	split = "";

	# Module for Hamming distance
	dist_hamming = {
		# Normalization: "none", "min", "max" and "avg".
		norm = "none";
	};


	# Module for Levenshtein distance
	dist_levensthein = {
		# Normalization: "none", "min", "max" and "avg".
		norm = "none";
		
		# Costs for insertion, deletion and substitution
		cost_ins = 1.0;
		cost_del = 1.0;
		cost_sub = 1.0;
	};

	# Module for Damerau-Levenshtein distance
	dist_damerau = {
		# Normalization: "none", "min", "max" and "avg".
		norm = "none";

		# Costs for insertion, deletion, substitution and transposition
		cost_ins = 1.0;
		cost_del = 1.0;
		cost_sub = 1.0;
		cost_tra = 1.0;
	};

	# Module for optimal string alignment (OSA) distance
	dist_osa = {
		# Normalization: "none", "min", "max" and "avg".
		norm = "none";

		# Costs for insertion, deletion, substitution and transposition
		cost_ins = 1.0;
		cost_del = 1.0;
		cost_sub = 1.0;
		cost_tra = 1.0;
	};

	# Module for Jaro distance and Jaro-Winkler distance
	dist_jarowinkler = {
		# Scaling factor for prefixes.
		scaling = 0.1;
	};

	# Module for Lee distance
	dist_lee = {
		# Range of symbols in strings. 
		min_sym = 0;
		max_sym = 255;
	};

	# Module for compression distance
	dist_compression = {
		# Compression level between 1 and 9.
		level = 9;
	};

	# Module for Bag distance
	dist_bag = {
		# Normalization: "none", "min", "max" and "avg".
		norm = "none";
	};	

	# Module kernel-based distance 
	dist_kern = {
		# Distance function 
		kern = "kern_wdegree";

		# Normalization: "none", "l2".
		norm = "none";

		# Return squared distance
		squared = true;
	};

	# Module weighted-degree kernel with shifts
	kern_wdegree = {
		# Normalization: "none", "l2".
		norm = "none";

		# Degree (k-mer/k-gram length)
		degree = 3;

		# Shift of kernel
		shift = 0;
	};

	# Module subsequence kernel
	kern_subsequence = {
		# Normalization: "none", "l2".
		norm = "none";

		# Length of subsequences
		length = 3;

		# Weight for gaps;
		lambda = 0.1;
	};
        
	# Module spectrum kernel
	kern_spectrum = {
		# Normalization: "none", "l2".
		norm = "none";

		# Length of k-mers (or n-grams)
		length = 3;
	};
	
	# Module distance substitution kernel
	kern_distance = {
		# Distance function 
		dist = "dist_bag";

		# Substitution type: "linear", "poly", "neg", "rbf".
		type = "linear";
	
		# Normalization: "none", "l2".
		norm = "none";

		# Scaling factor for "poly" and "rbf"
		gamma = 1.0;

		# Polynomial degree for "poly" and "neg"
		degree = 1.0;
	};

        # Module for similarity coefficients
        sim_coefficientv = {
                # Marching: "bin", "cnt"
                matching = "bin";
        };
};

# Configuration of output
output = {
    # Output format.
    # Supported formats: "text", "libsvm", "stdout"
    output_format = "text";

    # Separator in text mode
    separator = ",";

    # Save indices of strings.
    save_indices = true;

    # Save labels of strings
    save_labels = false;

    # Save sources of strings 
    save_sources = false;

    # Save a triangular matrix only.
    triangular = false;

    # Compress output
    compress = false;
};
